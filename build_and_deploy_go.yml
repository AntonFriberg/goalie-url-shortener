---
- hosts: go-api-service
  become: true
  pre_tasks:
    - name: Check Ansible version
      assert:
        that: "ansible_version.full | version_compare('{{ ansible.least_version }}', '>=')"
        msg: "Ansible {{ ansible.least_version }} or higher required."

    - name: Check Docker version
      block:
        - command: bash -c "dpkg -s docker-ce | grep Version | cut -d ' ' -f2 | cut -d '~' -f1"
          register: docker_version

        - assert:
            that: "docker_version.stdout | version_compare('{{ docker.least_version }}', '>=')"
            msg: "Docker-ce {{ docker.least_version }} or higher required, current {{ docker_version.stdout}}"

    - name: Check if docker-py exists
      block:
        - command: bash -c "pip show docker-py"
          register: docker_py_version
        - assert:
            that: "docker_py_version.stdout | version_compare('{{ docker.py_version }}', '>=')"
            msg: "docker-py {{ docker.py_version }} or higher required"

    - name: Check if go user exists, otherwise create it
      user:
        name: go
        group: sudo
        system: yes
        home: "{{ go.home }}"
        createhome: yes
        shell: /bin/bash
        uid: "{{ go.uid }}"

    - name: Check if LDAP is installed otherwise install it.
      apt:
        name: ldap-utils
        state: present

    - name: Create necessary directories for the go service.
      file:
        path: "{{ item.dest }}"
        owner: go
        group: sudo
        mode: "{{ item.mode }}"
        state: "{{ item.state }}"
      with_items:
        - { dest: "{{ go.logs_dir }}", mode: "u=rwx,g=rx,o=rx", state: directory}
        - { dest: "{{ go.home }}/conf", mode: "u=rwx,g=rx,o=rx", state: directory}

  tasks:
    - name: Create tmp docker dir for the service
      command: mktemp -d
      register: image_dir

    - name: Provide the Dockerfile
      template:
        src: "templates/dockerfile_backend_template.j2"
        dest: "{{ image_dir.stdout }}/Dockerfile"
        mode: "u=rw,g=r,o=r"
        owner: go
        group: sudo

    - name: Build the go service.
      docker_image:
        buildargs:
          https_proxy: "{{ company_proxy }}"
          http_proxy: "{{ company_proxy }}"
          HTTP_PROXY: "{{ company_proxy }}"
          HTTPS_PROXY: "{{ company_proxy }}"
        name: go-service
        path: "{{ image_dir.stdout }}"
        state: present
        tag: latest
        push: no
        force: yes

    - name: Remove the temp directory
      file:
        path: "{{ image_dir.stdout }}"
        state: absent

    - name: Create internal network
      docker_network:
        name: "{{ go_network.name }}"
        ipam_options:
          subnet: "{{ go_network.subnet }}"
          gateway: "{{ go_network.gateway }}"

- import_playbook: deploy_go_mongo.yml

- import_playbook: deploy_go_api.yml

- import_playbook: deploy_go_service.yml
