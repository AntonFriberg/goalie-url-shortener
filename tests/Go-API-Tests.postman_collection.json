{
	"info": {
		"name": "Go-API-Tests",
		"_postman_id": "f02654e9-4a5f-e8d1-8522-a3d0779a28e2",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Go Login Missing parameter.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "47fc76fe-c246-42a2-b169-f7a0e2580785",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Unauthorized 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"var data = pm.response.json();",
							"",
							"pm.test('The message should be \"Missing either username or password', function () {",
							"   pm.expect(data.msg).to.be.eql(\"Missing either username or password\"); ",
							"});"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"password\": \"\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/login",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"login"
					]
				},
				"description": "Test login without specifying the username field."
			},
			"response": []
		},
		{
			"name": "Go Login User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5e667f5e-6de5-4f40-a5f3-61dd14700bec",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var data = pm.response.json();",
							"",
							"pm.test(\"Check for rights: user\", function () {",
							"   pm.expect(data.rights).to.eql('user');",
							"});",
							"",
							"pm.test(\"Check for access_token existence\", function () {",
							"   pm.expect(data.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Check for refresh_token existence\", function () {",
							"   pm.expect(data.refresh_token).to.not.be.empty;",
							"});",
							"",
							"if (data.hasOwnProperty('refresh_token')) {",
							"    pm.environment.set(\"user_refresh_token\", data.refresh_token);",
							"}",
							"",
							"if (data.hasOwnProperty('access_token')) {",
							"    pm.environment.set(\"user_access_token\", data.access_token);",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"user\",\n\t\"password\": \"pass\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/login",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"login"
					]
				},
				"description": "Try to login and obtain a token."
			},
			"response": []
		},
		{
			"name": "Go Login Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7d832253-1a0e-4f29-8b3f-ea5b09a93a3e",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var data = pm.response.json();",
							"",
							"pm.test(\"Check for rights: admin\", function () {",
							"   pm.expect(data.rights).to.eql('admin');",
							"});",
							"",
							"pm.test(\"Check for access_token existence\", function () {",
							"   pm.expect(data.access_token).to.not.be.empty;",
							"});",
							"",
							"pm.test(\"Check for refresh_token existence\", function () {",
							"   pm.expect(data.refresh_token).to.not.be.empty;",
							"});",
							"",
							"if (data.hasOwnProperty('refresh_token')) {",
							"    pm.environment.set(\"admin_refresh_token\", data.refresh_token);",
							"}",
							"",
							"if (data.hasOwnProperty('access_token')) {",
							"    pm.environment.set(\"admin_access_token\", data.access_token)",
							"}"
						]
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\": \"admin\",\n\t\"password\": \"pass\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/login",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"login"
					]
				},
				"description": "Test login with admin rights."
			},
			"response": []
		},
		{
			"name": "Go Refresh User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aab73ea8-6c0d-480b-970e-33494da6f21d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var data = pm.response.json();",
							"",
							"if (data.hasOwnProperty('access_token')) {",
							"    pm.test(\"Check existance of access_token\", function () {",
							"        pm.expect(data.access_token).to.not.be.empty;",
							"    });",
							"    ",
							"    if (data.access_token !== \"\") {",
							"        pm.environment.set(\"user_access_token\", data.access_token);",
							"    }",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_refresh_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}:12001/refresh",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"refresh"
					]
				},
				"description": "Try to get a new access_token for a user using a refresh token."
			},
			"response": []
		},
		{
			"name": "Go Refresh User Corrupt token",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c81639b1-7e1b-4751-8657-d4a6d11978bc",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Unprocessable entity 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"MSG should be: Invalid header padding\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.msg).to.be.eql(\"Invalid header padding\");",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "1.1.1",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}:12001/refresh",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"refresh"
					]
				},
				"description": "Try to get a new access_token for a user using a corrupt refresh token."
			},
			"response": []
		},
		{
			"name": "Go Refresh User Corrupt token null",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ecd32f91-118a-4e45-a63b-8a829bb46a03",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Unprocessable entity 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"pm.test(\"MSG should be: Not enough segments.\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.msg).to.be.eql(\"Not enough segments\");",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "null",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}:12001/refresh",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"refresh"
					]
				},
				"description": "Try to get a new access_token for a user using a corrupt refresh token set to null."
			},
			"response": []
		},
		{
			"name": "Go Refresh Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fde8950c-e4d4-4ef5-b26a-5207b4a6e9d5",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var data = pm.response.json();",
							"",
							"if (data.hasOwnProperty('access_token')) {",
							"    pm.test(\"Check existance of access_token\", function () {",
							"        pm.expect(data.access_token).to.not.be.empty;",
							"    });",
							"    ",
							"    if (data.access_token !== \"\") {",
							"        pm.environment.set(\"admin_access_token\", data.access_token);",
							"    }",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_refresh_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{host}}:12001/refresh",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"refresh"
					]
				},
				"description": "Try to get a new access_token for admin using a refresh token."
			},
			"response": []
		},
		{
			"name": "Get All aliases. No specific user.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "461949b8-ce40-4a30-a9ef-7a7afa67fd26",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "ad005397-b706-4940-8cdb-23a358c901e9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var items = pm.response.json()._items;",
							"",
							"pm.test(\"Check for an empty response.\", function () {",
							"    pm.expect(items).to.be.empty;",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/all",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"all"
					]
				},
				"description": "A request that gets all aliases from the service with no specific user preference."
			},
			"response": []
		},
		{
			"name": "Go add new alias for admin.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c8798a59-d883-474b-95a2-21c9cdcc55b1",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('admin_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"testpattern\",\n\t\"target\": \"www.admin-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Add a new alias with admin rights."
			},
			"response": []
		},
		{
			"name": "Go add already existing alias.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "039a0660-2b19-4cb7-8fda-c046183495bb",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"testpattern\",\n\t\"target\": \"www.admin-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Try to add an already existing alias."
			},
			"response": []
		},
		{
			"name": "Go get alias for admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4fda27b6-e8af-4034-a0e6-bc3549865dfc",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var items = pm.response.json()._items;",
							"",
							"pm.test(\"Check for an non-empty response.\", function () {",
							"    pm.expect(items).to.not.be.empty;",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/all/admin",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"all",
						"admin"
					]
				},
				"description": "Get all aliases for admin."
			},
			"response": []
		},
		{
			"name": "Go get alias for user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6df3d5b5-98d8-460c-9aee-aca70313ff5b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var items = pm.response.json()._items;",
							"",
							"pm.test(\"Check for an empty response.\", function () {",
							"    pm.expect(items).to.be.empty;",
							"})"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/all/user",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"all",
						"user"
					]
				},
				"description": "Try to get alias for a user"
			},
			"response": []
		},
		{
			"name": "Go add new alias for user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3626a951-7394-4d17-a721-a55e76086809",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"userpattern\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Add a new alias for the user."
			},
			"response": []
		},
		{
			"name": "Go delete admin alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c448599-6bc1-49dc-90da-dd023ec48dbf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{admin_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{admin_alias_id}}"
					]
				},
				"description": "Try to delete the alias for the admin."
			},
			"response": []
		},
		{
			"name": "Go delete user alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d5fd365-eec0-4688-8923-559a1bbdd215",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{user_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{user_alias_id}}"
					]
				},
				"description": "Try to delete user alias with user."
			},
			"response": []
		},
		{
			"name": "Go add new alias for admin.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbf6a745-bd98-4c9a-81db-e9718b8706b6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('admin_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"adminpattern\",\n\t\"target\": \"www.admin-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Add a new alias for the admin again."
			},
			"response": []
		},
		{
			"name": "Go delete admin alias with user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e4e9d2a8-29c0-4151-a088-1affdbab9219",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{admin_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{admin_alias_id}}"
					]
				},
				"description": "Try to delete the alias for the admin with the user access."
			},
			"response": []
		},
		{
			"name": "Go delete admin alias with admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c448599-6bc1-49dc-90da-dd023ec48dbf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{admin_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{admin_alias_id}}"
					]
				},
				"description": "Try to delete the alias for the admin as admin."
			},
			"response": []
		},
		{
			"name": "Go add new alias for user again.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3626a951-7394-4d17-a721-a55e76086809",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"userpattern\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Add a new alias for the user again."
			},
			"response": []
		},
		{
			"name": "Go add new alias for admin again",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bbf6a745-bd98-4c9a-81db-e9718b8706b6",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('admin_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"adminpattern\",\n\t\"target\": \"www.admin-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api"
					]
				},
				"description": "Add a new alias for the admin again."
			},
			"response": []
		},
		{
			"name": "Go patch user alias with user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c185366a-311a-4b37-898c-b82659ad8ac0",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"anew2\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api/{{user_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{user_alias_id}}"
					]
				},
				"description": "Try to delete the alias for the user with the admin access."
			},
			"response": []
		},
		{
			"name": "Go patch admin alias with user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b15deb8-6f28-48d6-a829-5bfb7ebde886",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"//var res = pm.response.json();",
							"",
							"/*if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}*/"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"anew2\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api/{{admin_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{admin_alias_id}}"
					]
				},
				"description": "Try to patch an admin alias pattern with a user."
			},
			"response": []
		},
		{
			"name": "Go patch user alias with admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ed2a5785-2391-4f2e-afe2-ac4e8d6d887b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"To similar pattern, gives 422\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"anew2\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api/{{user_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{user_alias_id}}"
					]
				},
				"description": "Try to patch a user alias pattern with a user."
			},
			"response": []
		},
		{
			"name": "Go patch user alias with admin, not similar pattern.",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "02876ec8-19f4-450d-a670-cf098e7116f9",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Have patched the alias, 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"var res = pm.response.json();",
							"",
							"if (res.hasOwnProperty('_id')) {",
							"    pm.environment.set('user_alias_id', res._id);",
							"}"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"pattern\": \"anew\",\n\t\"target\": \"www.user-site.com\"\n}"
				},
				"url": {
					"raw": "{{host}}:12001/api/{{user_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{user_alias_id}}"
					]
				},
				"description": "Try to patch a user alias with admin with a not simliar pattern."
			},
			"response": []
		},
		{
			"name": "Go delete user alias cleanup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2d5fd365-eec0-4688-8923-559a1bbdd215",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{user_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{user_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{user_alias_id}}"
					]
				},
				"description": "Delete the user alias as user."
			},
			"response": []
		},
		{
			"name": "Go delete admin alias cleanup",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0c448599-6bc1-49dc-90da-dd023ec48dbf",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{admin_access_token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {},
				"url": {
					"raw": "{{host}}:12001/api/{{admin_alias_id}}",
					"host": [
						"{{host}}"
					],
					"port": "12001",
					"path": [
						"api",
						"{{admin_alias_id}}"
					]
				},
				"description": "Delete the admin alias as admin."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "99b44c4f-4a97-4424-8d85-d4bbe8863b9d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f0731659-fc06-4a1d-8739-b61351a76d83",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "3f733363-d2e2-4e87-aad2-b181cbff18a9",
			"key": "host",
			"value": "http://172.48.0.3",
			"type": "text"
		}
	]
}